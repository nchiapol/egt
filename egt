#!/usr/bin/python
import cliapp
import egtlib
import datetime
import sys
import logging
import os.path

VERSION="0.1"

class EgtApp(cliapp.Application):
    def __init__(self):
        super(EgtApp, self).__init__(
            progname="egt",
            version=VERSION,
            description="Enrico's Getting Things Done",
        )

    def setup_logging(self):
        if not self.settings["log"] and (self.settings["verbose"] or self.settings["debug"]):
            FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
            if self.settings["debug"]:
                logging.basicConfig(level=logging.DEBUG, stream=sys.stderr, format=FORMAT)
            else:
                logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
        else:
            super(EgtApp, self).setup_logging()


    def add_settings(self):
        self.settings.string(['tag', 't'], "limit processing to projects with the given (comma separated) tag(s)", metavar="tag")
        self.settings.string(['backup-output'], "backup tarball to generate (by default it is sent to stdout) (the filename is passed to strftime, so you can use something like %Y-%m-%d in the configuration)", metavar="filename")
        self.settings.boolean(['vcal'], "output events in vCalendar format")
        self.settings.boolean(['verbose', 'v'], "verbose output")
        self.settings.boolean(['debug'], "debug output")

    def get_tags(self):
        if self.settings["tag"]:
            return frozenset(self.settings["tag"].split(","))
        else:
            return frozenset()

    def make_egt(self):
        return egtlib.Egt(tags=self.get_tags())

    def cmd_scan(self, args):
        """
        Update the list of known project files, by scanning everything below
        the home directory.
        """
        e = self.make_egt()
        e.scan()

    def cmd_list(self, args):
        """
        List known projects.
        """
        e = self.make_egt()
        name_len = max((len(x) for x in e.state.projects))
        homedir = os.path.expanduser("~")
        for k, v in sorted(e.state.projects.iteritems()):
            if v.path.startswith(homedir):
                print v.name.ljust(name_len), "~%s" % v.path[len(homedir):]
            else:
                print v.name.ljust(name_len), v.path

    def cmd_summary(self, args):
        e = self.make_egt()
        if args:
            projs = (e.project(a) for a in args)
        else:
            projs = e.projects.itervalues()

        blanks = []
        worked = []
        for p in projs:
            if p.last_updated is None:
                blanks.append(p)
            else:
                worked.append(p)

        blanks.sort(key=lambda p:p.name)
        worked.sort(key=lambda p:p.last_updated)

        for p in blanks: p.summary()
        for p in worked: p.summary()

    def cmd_term(self, args):
        """
        Open a terminal in a project directory.
        """
        e = self.make_egt()
        for name in args:
            proj = e.project_by_name(name)
            proj.spawn_terminal()

    def cmd_work(self, args):
        """
        Open a terminal in a project directory, and edit the project file.
        """
        e = self.make_egt()
        for name in args:
            proj = e.project_by_name(name)
            proj.spawn_terminal(with_editor=True)

    def cmd_edit(self, args):
        """
        Open a terminal in a project directory, and edit the project file.
        """
        e = self.make_egt()
        for name in args:
            proj = e.project_by_name(name)
            proj.run_editor()

    def cmd_grep(self, args):
        """
        Open a terminal in a project directory, and edit the project file.
        """
        e = self.make_egt()
        for name, proj in e.projects.iteritems():
            proj.run_grep(args)

    def cmd_when(self, args):
        """
        Show next-action lists that intersect the given context set
        """
        contexts = frozenset(args)
        e = self.make_egt()
        e.print_next_actions(contexts)

    def cmd_weekrpt(self, args):
        """
        Compute weekly reports
        """
        e = self.make_egt()
        if args:
            end = datetime.datetime.strptime(args[0], "%Y-%m-%d").date()
        else:
            end = None
        rep = e.weekrpt(end=end)
        print "Activity from %s to %s:" % (rep["begin"], rep["until"])
        print "%d entries, %d hours in total, %d hours per day, %d hours per working day" % (
            rep["count"], rep["hours"], rep["hours_per_day"], rep["hours_per_workday"])
        for l, p in rep["log"]:
            l.output(p.name)

    def cmd_cal(self, args):
        """
        Compute calendar of next actions
        """
        e = self.make_egt()
        if args:
            end = datetime.datetime.strptime(args[0], "%Y-%m-%d").date()
        else:
            end = None

        events = e.calendar(tags=self.get_tags())

        cal = None
        if self.settings["vcal"]:
            # http://blog.thescoop.org/archives/2007/07/31/django-ical-and-vobject/
            import vobject
            cal = vobject.iCalendar()
            cal.add('method').value = 'PUBLISH'  # IE/Outlook needs this

        if cal is None:
            for e in events:
                sys.stdout.write("\n".join(e.lines))
                sys.stdout.write("\n")
        else:
            for e in events:
                e.add_to_vobject(cal)
            print cal.serialize()


    def cmd_backup(self, args):
        out = self.settings["backup-output"]
        e = self.make_egt()
        if out:
            out = datetime.datetime.now().strftime(out)
            with open(out, "w") as fd:
                e.backup(fd)
        else:
            e.backup(sys.stdout)

    def cmd_serve(self, args):
        """
        Start a web server for reports
        """
        from egtlib import web
        print "Server starting at localhost:5000"
        web.app.make_egt = self.make_egt
        web.app.debug = True
        web.app.run()

if __name__ == '__main__':
    EgtApp().run()

