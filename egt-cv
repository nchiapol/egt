#!/usr/bin/python
import cliapp
import egtlib
import yaml
import logging
import sys
import os
import shutil
import jinja2
import subprocess
import datetime

VERSION="0.1"

class ProjectGroup(object):
    def __init__(self, name):
        self.name = name
        self.entries = []

    def add(self, project):
        """
        Add a project to this group
        """
        self.entries.append(project)

    def _project_sort_key(self, p):
        """
        Get the sort key to use to sort projects before merging
        """
        since, until = p.formal_period
        return (
            not p.archived,
            until or since or datetime.date.today(),
            p.name,
        )

    def get_merged_info(self):
        """
        Merge all project info in a single CV entry
        """
        # Sort with the most relevant last
        self.entries.sort(key=self._project_sort_key)

        # Defaults
        info = {
            "title": self.name.capitalize(),
            "group-title": None,
            "description": None,
            "homepage": None,
            "issuer": None,
            "tags": frozenset(),
        }
        all_archived = True
        period_since = None
        period_until = None

        for p in self.entries:
            # Get the various text fields, keeping the latest one
            for field in ("group-title", "title", "recipient", "description", "homepage", "issuer"):
                val = p.meta.get(field, None)
                if val is not None:
                    info[field] = val.decode("utf8")

            # Keep only the tags of the last one
            info["tags"] = p.tags

            # Get the period
            since, until = p.formal_period

            # Check if there are still active projects in this group
            if not p.archived:
                all_archived = False
                if since or until:
                    period_until = until

            # Extend period ranges using since and until
            if period_since is None:
                period_since = since
            elif since is not None and since < period_since:
                period_since = since
            if period_until is None:
                period_until = until
            elif until is not None and until > period_until:
                period_until = until

        # Group-title, if present, overrides title
        val = info.pop("group-title", None)
        if val is not None:
            info["title"] = val

        # If there are still active projects, unset 'until' to say that the
        # entry is still ongoing
        if not all_archived:
            if period_until is not None and period_until >= datetime.date.today():
                period_until = None

        # Set the final period information
        info["period"] = {
            "since": period_since,
            "until": period_until,
        }

        return info


class CV(object):
    LANG_SKILLS = {
        "A1": "beginner",
        "A2": "elementary",
        "B1": "intermediate",
        "B2": "upper intermediate",
        "C1": "advanced",
        "C2": "master",
    }
    def __init__(self, dirname):
        self.dirname = dirname
        self.personal = {}
        self.shortbio = []
        self.languages = {}
        self.technical_skills = []
        self.social_skills = []
        self.tags = {}
        self.job_types = {}
        self.job_employers = {}
        self.logs = {}
        self.egt_blacklist = set()

    def load(self):
        # Load base info from yaml files
        for fn in sorted(os.listdir(self.dirname)):
            if not fn.endswith(".yaml"): continue
            pathname = os.path.join(self.dirname, fn)
            with open(pathname) as fd:
                info = yaml.load(fd)
                self.acquire_structured(info)

        # Load historical info from egt, based on tags set in yaml files
        for k, v in self.tags.iteritems():
            if isinstance(v, basestring):
                tags = frozenset((v,))
            else:
                tags = frozenset(v)
            self.acquire_egt(k, tags)

    def acquire_structured(self, info):
        """
        Acquire general info from a data structure
        """
        i = info.get("personal", None)
        if i is not None:
            for k, v in i.iteritems():
                if k == "telephone":
                    tels = self.personal.setdefault(k, [])
                    for t in v:
                        for tk, tv in t.iteritems():
                            tels.append({
                                "name": tk,
                                "value": tv,
                            })
                elif k in ("email", "homepage"):
                    # Coerce to list
                    if isinstance(v, basestring):
                        self.personal[k] = [v]
                    else:
                        self.personal[k] = v
                else:
                    self.personal[k] = v

        i = info.get("shortbio", None)
        if i is not None:
            if isinstance(i, basestring):
                self.shortbio.append(i)
            else:
                self.shortbio.extend(i)

        i = info.get("languages", None)
        if i is not None:
            for lang in i:
                for k, v in lang.iteritems():
                    if v == "main":
                        self.languages.setdefault("mothertongue", []).append(k)
                    else:
                        table = self.languages.setdefault("table", [])
                        table.append({
                            "name": k,
                            "skills": { lk: self.LANG_SKILLS.get(lv.upper(), lv) for lk, lv in v.iteritems() },
                        })

        i = info.get("technical_skills", None)
        if i is not None:
            if isinstance(i, basestring):
                self.technical_skills.append(i)
            else:
                self.technical_skills.extend(i)

        i = info.get("social_skills", None)
        if i is not None:
            if isinstance(i, basestring):
                self.social_skills.append(i)
            else:
                self.social_skills.extend(i)

        i = info.get("tags", {})
        for k, v in i.iteritems():
            self.tags[k] = v

        i = info.get("job-types", {})
        for k, v in i.iteritems():
            self.job_types[k] = v

        i = info.get("job-employers", {})
        for k, v in i.iteritems():
            self.job_employers[k] = v

        i = info.get("egt-blacklist", [])
        if isinstance(i, basestring):
            self.egt_blacklist.add(i)
        else:
            self.egt_blacklist.update(i)


    def acquire_egt(self, log_group, tags):
        """
        Acquire historical info from egt projects with the given tags
        """
        egt = egtlib.Egt(tags=tags, archived=True)

        # Collect egt entries and group them by group name
        groups = {}
        for p in egt.projects.itervalues():
            if p.name in self.egt_blacklist:
                continue
            group = groups.get(p.group, None)
            if group is None:
                group = ProjectGroup(p.group)
                groups[p.group] = group
            group.add(p)

        # Get the merged group info
        logs = []
        for g in groups.itervalues():
            info = g.get_merged_info()
            for k, v in self.job_types.iteritems():
                if k in info["tags"]:
                    info["job_type"] = v
            for k, v in self.job_employers.iteritems():
                if k in info["tags"]:
                    info["employer"] = v
            if log_group == "work" and not info.get("employer"):
                continue
            logs.append(info)

        if logs:
            logs.sort(key=lambda x:(x["period"]["until"] or datetime.date.today(), x["period"]["since"] or datetime.date.today()), reverse=True)
            self.logs.setdefault(log_group, []).extend(logs)

    def template_context(self):
        """
        Return a dict with all the arguments to pass to the template renderer
        """
        return {
            "dirname": self.dirname,
            "personal": self.personal,
            "shortbio": self.shortbio,
            "languages": self.languages,
            "technical_skills": self.technical_skills,
            "social_skills": self.social_skills,
            "lastedit": datetime.date.today(),
            "logs": self.logs,
        }

    def dump(self, out=sys.stdout):
        """
        Dump all info we have to the given file descriptor
        """
        yaml.dump(self.template_context(), out)

    def translatable_strings(self):
        """
        Generate all the translatable strings found in the data
        """
        for k in ("nationality", "notes"):
            s = self.personal.get(k, None)
            if s is not None:
                yield s

        tel = self.personal.get("telephone", None)
        if tel is not None:
            for t in tel:
                yield t["name"]

        for s in self.shortbio:
            yield s

        for l in self.languages.get("mothertongue", []):
            yield l
        for l in self.languages.get("table", []):
            yield l["name"]

        for s in self.technical_skills:
            yield s

        for s in self.social_skills:
            yield s

        for s in self.job_types.itervalues():
            yield s

        for s in self.job_employers.itervalues():
            yield s

        for name, entries in self.logs.iteritems():
            for l in entries:
                for field in ("title", "employer", "description", "issuer"):
                    if l.get(field):
                        yield l[field]

    def extract_strings(self):
        """
        Extract translatable strings.

        Returns two Catalog objects: one for egt-cv and jinja2 templates, the
        other for personal CV information. The idea is that the translations of
        the first catalog can be public and shipped with egt-cv itself
        """
        from babel.messages import Catalog

        # Instantiate jinja2 machinery to get string extraction
        jinja_env = jinja2.Environment(extensions=['jinja2.ext.i18n'])

        # Build the egt-cv catalog
        c_tpl = Catalog()

        # Add strings from our consts
        for s in self.LANG_SKILLS.itervalues():
            c_tpl.add(s)

        # Add strings from jinja2 templates
        tpldir = os.path.join(self.dirname, "templates")
        for fn in os.listdir(tpldir):
            if not fn.endswith(".html"): continue
            pathname = os.path.join(tpldir, fn)
            with open(pathname) as fd:
                for lineno, func, msg in jinja_env.extract_translations(fd.read().decode("utf8")):
                    c_tpl.add(msg, locations=((pathname, lineno),))

        # Build the personal cv catalog
        c_cv = Catalog()

        # Add our strings
        for s in self.translatable_strings():
            c_cv.add(s)

        return c_tpl, c_cv

    def list_languages(self):
        """
        Get the list of available output languages
        """
        localedir = os.path.join(self.dirname, "locale")
        for lang in os.listdir(localedir):
            if lang[0] == ".": continue
            dn = os.path.join(localedir, lang)
            if not os.path.isdir(dn): continue
            yield lang, dn

    def update_catalog(self, msgfile, catalog):
        from babel.messages.pofile import read_po, write_po

        # Read the existing potfile if it exists
        if os.path.isfile(msgfile):
            with open(msgfile) as fd:
                cat = read_po(fd)
                cat.update(catalog)
        else:
            cat = catalog

        # Write updated catalogs
        with open(msgfile, "w") as fd:
            write_po(fd, cat)

    def update_catalogs(self):
        """
        Update all available translation catalogs
        """
        c_tpl, c_cv = self.extract_strings()

        # Scan locale dirs
        for lang, langdir in self.list_languages():
            # If a locale dir exists, make sure it contains what is needed
            msgdir = os.path.join(langdir, "LC_MESSAGES")
            if not os.path.isdir(msgdir):
                os.mkdir(msgdir)
            self.update_catalog(os.path.join(msgdir, "egt-cv.po"), c_tpl)
            self.update_catalog(os.path.join(msgdir, "cv.po"), c_cv)
            # Let the user know what we did
            print lang

    def render(self, outdir, locales):
        """
        Render the curriculum, writing results to the given output directory
        """
        from babel.support import Translations
        # Reset the output directory
        if os.path.exists(outdir):
            shutil.rmtree(outdir)
        os.mkdir(outdir)

        # Get translations
        translations = Translations.load(
            os.path.join(self.dirname, "locale"),
            locales,
            "cv")

        # Instantiate jinja2 template machinery
        tpldir = os.path.join(self.dirname, "templates")
        jinja_env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(tpldir),
            extensions=['jinja2.ext.i18n'])
        jinja_env.install_gettext_translations(translations, True)

        jinja_context = self.template_context()

        # Copy everything except .html files
        for fn in os.listdir(tpldir):
            if fn.startswith("."): continue
            if fn.endswith(".html"):
                # Render .html files with jinja2
                tpl = jinja_env.get_template(fn)
                rendered = tpl.render(**jinja_context)
                with open(os.path.join(outdir, fn), "w") as fd:
                    fd.write(rendered.encode("utf8"))
            else:
                # Copy all other files
                shutil.copyfile(os.path.join(tpldir, fn), os.path.join(outdir, fn))

    def render_all_languages(self):
        """
        Render the curriculum for all languages
        """
        for lang, langdir in self.list_languages():
            merged_fname = os.path.join(langdir, "LC_MESSAGES/merged.po")
            compiled_fname = os.path.join(langdir, "LC_MESSAGES/cv.mo")

            # Merge all translations
            subprocess.check_call([
                "msgcat",
                os.path.join(langdir, "LC_MESSAGES/egt-cv.po"),
                os.path.join(langdir, "LC_MESSAGES/cv.po"),
                "-o", merged_fname])

            # Compile the merged translations
            subprocess.check_call(["msgfmt", "-c", "-f", "-o", compiled_fname, merged_fname])

            outdir = os.path.join(self.dirname, "cv-" + lang)
            self.render(outdir, (lang,))

            # Cleanup the compiled translations
            os.unlink(merged_fname)
            os.unlink(compiled_fname)


class EgtCVApp(cliapp.Application):
    def __init__(self):
        super(EgtCVApp, self).__init__(
            progname="egt-cv",
            version=VERSION,
            description="Enrico's Getting Things Done - CV generator",
        )

    def setup_logging(self):
        if not self.settings["log"]:
            FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
            if self.settings["debug"]:
                logging.basicConfig(level=logging.DEBUG, stream=sys.stderr, format=FORMAT)
            elif self.settings["verbose"]:
                logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
            else:
                logging.basicConfig(level=logging.WARN, stream=sys.stderr, format=FORMAT)
        else:
            super(EgtCVApp, self).setup_logging()

    def add_settings(self):
        self.settings.boolean(['verbose', 'v'], "verbose output")
        self.settings.boolean(['debug'], "debug output")

    def cmd_dump(self, args):
        """
        Dump all cv information to standard output
        """
        cv = CV(args[0])
        cv.load()
        cv.dump()

    def cmd_update_catalogs(self, args):
        """
        Update the catalogs of translatable strings.

        In order to start a translation, just run:
          mkdir $cvdir/locale/$LANG
        """
        cv = CV(args[0])
        cv.load()
        cv.update_catalogs()

    def cmd_render(self, args):
        """
        Render the CV for all configured languages
        """
        cv = CV(args[0])
        cv.load()
        cv.render_all_languages()

if __name__ == '__main__':
    EgtCVApp().run()
